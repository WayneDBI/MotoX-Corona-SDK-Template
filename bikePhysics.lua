-- This file is for use with Corona(R) SDK
--
-- This file is automatically generated with PhysicsEdtior (http://physicseditor.de). Do not edit
--
-- Usage example:
--			local scaleFactor = 1.0
--			local physicsData = (require "shapedefs").physicsData(scaleFactor)
--			local shape = display.newImage("objectname.png")
--			physics.addBody( shape, physicsData:get("objectname") )
--

-- copy needed functions to local scope
local unpack = unpack
local pairs = pairs
local ipairs = ipairs

local M = {}

function M.physicsData(scale)
	local physics = { data =
	{ 
		
		["obj_bikeidle_002"] = {
                    
                    
                    
                    
                    {
                    pe_fixture_id = "", density = 80, friction = 0.6, bounce = 0.2, 
                    filter = { categoryBits = 1, maskBits = 6, groupIndex = 0 },
                    shape = {   24, -4  ,  34, 9  ,  37, 19  ,  16, 32  ,  14, 26  ,  9, -1  ,  14, -10  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 80, friction = 0.6, bounce = 0.2, 
                    filter = { categoryBits = 1, maskBits = 6, groupIndex = 0 },
                    shape = {   -11, 1  ,  -35, 33  ,  -36, 18  ,  -34, 1  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 80, friction = 0.6, bounce = 0.2, 
                    filter = { categoryBits = 1, maskBits = 6, groupIndex = 0 },
                    shape = {   23, 37  ,  16, 32  ,  37, 19  ,  38, 27  ,  35, 33  ,  30, 37  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 80, friction = 0.6, bounce = 0.2, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -36, 18  ,  -35, 33  ,  -38, 28  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 80, friction = 0.6, bounce = 0.2, 
                    filter = { categoryBits = 1, maskBits = 6, groupIndex = 0 },
                    shape = {   9, -1  ,  -11, 27  ,  -31, 36  ,  -35, 33  ,  -11, 1  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 80, friction = 0.6, bounce = 0.2, 
                    filter = { categoryBits = 1, maskBits = 65535, groupIndex = 0 },
                    shape = {   -31, 36  ,  -11, 27  ,  -17, 34  ,  -24, 37  }
                    }
                     ,
                    {
                    pe_fixture_id = "", density = 80, friction = 0.6, bounce = 0.2, 
                    filter = { categoryBits = 1, maskBits = 6, groupIndex = 0 },
                    shape = {   9, -1  ,  14, 26  ,  -11, 27  }
                    }
                    
                    
                    
		}
		
	} }

        -- apply scale factor
        local s = scale or 1.0
        for bi,body in pairs(physics.data) do
                for fi,fixture in ipairs(body) do
                    if(fixture.shape) then
                        for ci,coordinate in ipairs(fixture.shape) do
                            fixture.shape[ci] = s * coordinate
                        end
                    else
                        fixture.radius = s * fixture.radius
                    end
                end
        end
	
	function physics:get(name)
		return unpack(self.data[name])
	end
	
	return physics;
end

return M

